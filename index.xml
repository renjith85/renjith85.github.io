<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A programmers notebook</title>
    <link>https://pi14tech.com/</link>
    <description>Recent content on A programmers notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://pi14tech.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://pi14tech.com/asciidoc/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/asciidoc/cheatsheet/</guid>
      <description>Links     ASCII Format Rendered     https://asciidoctor.org - automatic!
 https://asciidoctor.org - automatic!
   ` Asciidoctor`
 Asciidoctor
    ASCII Format
    Asciidoctor @ GitHub
      </description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/git/identity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/identity/</guid>
      <description>Identifying yourself to Git Last updated 26 March 2016.
 To be properly credited for your contributions on Drupal.org, you must identify yourself to each installation of Git you use (home, office, laptop, etc).
 Identifying yourself to Git Personalized versions of both of the below commands with your details filled in can be found on at &#34;Your Dashboard&#34; » Profile » Edit » &#34;Git access&#34;.
 From the command line:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/git/ssh-to-git-multiple-accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/ssh-to-git-multiple-accounts/</guid>
      <description>===
 https://guide.freecodecamp.org/git/authenticate-with-github-using-ssh/
 After setting up the key
 ssh -T git@github.com-cerbabu
 `Host github.com-cerbabu Hostname github.com User git AddKeysToAgent yes UseKeyChain yes IdentityFile /Users/rbabu/.ssh/github_ce_id_rsa
 Host github.com-renjith85 Hostname github.com User git AddKeysToAgent yes UseKeyChain yes IdentityFile /Users/rbabu/.ssh/github_id_rsa   Host github.com-default Hostname github.com User git AddKeysToAgent yes UseKeyChain yes IdentityFile /Users/rbabu/.ssh/github_id_rsa `   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/linux/find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/linux/find/</guid>
      <description>Recursive list ls -R ls -l -R
 Using find command
 find . -print find . -ls
 Using du command
 du -a . du -a /path/to/search/ | more
   Copy without hidden folder rsync -a --exclude=&#39;.*&#39; /source/ /destination
 Prevent deleting destination files that match a pattern rsync -avrc --delete --exclude somedir source destination
 rsync &amp;#8230;&amp;#8203; --filter &#39;protect /remote-directory-to-keep/&#39; &amp;#8230;&amp;#8203;
 rsync &amp;#8230;&amp;#8203; --filter=&#39;P my-specific-logfile.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/linux/input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/linux/input/</guid>
      <description>Ask for user input in bash while true; do read -p &#34;Do you wish to continue running this?&#34; inp case $inp in [Yy]* ) break;; [Nn]* ) exit;; * ) echo &#34;Please answer yes or no&#34;;; esac done   echo &#34;Do you wish to install this program?&#34; select yn in &#34;Yes&#34; &#34;No&#34;; do case $yn in Yes ) make install; break;; No ) exit;; esac done   echo -n &#34;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/machine-learning/octave/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/machine-learning/octave/setup/</guid>
      <description>Installing octave on MacOS In order to install 5.1.0 we are going to use the Homebrew package manager. If you don’t have Homebrew installed, you can install it by running the next command in a Terminal:
 Link to homebrew section in macos book
 Start by making sure that your Homebrew installation is up to date:
 1 brew update 2 brew upgrade Finally, install Octave on your system:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/macos/homebrew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/macos/homebrew/</guid>
      <description>Homebrew My favourite package manager for macos is Homebrew.
 Install homebrew by following instructions at https://brew.sh/
   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/nodejs/building-simple-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/nodejs/building-simple-app/</guid>
      <description>https://expressjs.com/en/starter/hello-world.html
 https://expressjs.com/en/starter/installing.html
 https://nodejs.org/en/docs/guides/getting-started-guide/
 https://expressjs.com/en/starter/installing.html
 https://expressjs.com/en/guide/routing.html
 https://lodash.com/
 https://stackoverflow.com/questions/44068359/how-can-i-filter-json-using-lodash-js-or-underscore-js
 https://stackoverflow.com/questions/40222563/how-to-make-a-external-api-call-inside-express-server
 request(&#39;http://owaspdt.cloudentity.com:8080/api&#39;, function(error, response, body) { if(!error &amp;amp;&amp;amp; response.statusCode == 200) { console.log(body) } })
 const request = require(&#39;request&#39;)
 http://nodejs.org/api/http.html#http_http_request_options_callback
 http://owaspdt.cloudentity.com:8080/api/swagger.json
 https://flaviocopes.com/node-make-http-requests/
   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/assertions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/assertions/</guid>
      <description>Postman Response Assertions Within postman, test assertions can be included to check the validity of the API request and response objects. Postman test assertions follows a BDD style and are based on the capabilities of the Chai Assertion Library. Read more about Chai at https://www.chaijs.com/api/bdd/
 Assert status pm.test(&#34;Must fail with response status&#34;, function () { pm.response.to.have.status(400); });   Assert json response body element pm.test(&#34;Verify jwt issuer&#34;, function () { var jsonData = pm.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/hmac-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/hmac-generator/</guid>
      <description>HMAC Generator Snippet This is a sample code snippet for HMAC generation. In case you want to call an API that is protected using HMAC, below snippet can be used to do the same. Few HMAC providers might have slightly different algorithms, so please make sure the one you are using matches the outline below.
 var hmacApplicationUuid = postman.getEnvironmentVariable(&#34;hmacApplicationUuid&#34;) console.log(hmacApplicationUuid) var hmacSecretKey = postman.getEnvironmentVariable(&#34;hmacApplicationKey&#34;) console.log(hmacSecretKey) var targerApiUrl = request.url.replace(/{{(\w*)}}/g,function(str,key) { return postman.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/newman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/newman/</guid>
      <description>Newman Newman is the commandline equivalent of postman gui
 sudo npm install -g newman; cd postman-snippets; ./run_workflows.sh json envs/env.postman_environment.json   Iterate through your postman scripts
 #!/usr/bin/env bash ENVIRONMENT=envs/env.postman_environment.json REPORT_TYPE=html FLIP_POLICIES_BACK_TO_CORE=false if [ -n &#34;$1&#34; ]; then REPORT_TYPE=$1 fi if [ -n &#34;$2&#34; ]; then ENVIRONMENT=$2 fi if [ -d reports ]; then rm -r reports fi mkdir -p reports rm reports/postman.log 2&amp;gt; /dev/null for file in workflow-collections/*.json; do WORKFLOW=$(echo $file | sed -e &#34;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/postman-snippets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/postman-snippets/</guid>
      <description>Postman Snippets include::loop-request.adoc include::skip-request.adoc include::hmac-generator.adoc include::topt-verifier.adoc include::symmetric-jwt-generator.adoc
   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/pre-request-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/pre-request-scripts/</guid>
      <description>Pre request Set a random counter var randomCounter = Math.floor(Math.random() * 1000); postman.setGlobalVariable(&#39;userEmailCounter&#39;, randomCounter); postman.setEnvironmentVariable(&#34;userPassword&#34;,&#34;P@ssw0rd!&#34;) console.log(randomCounter)   Assert json response body pm.test(&#34;Verify jwt issuer&#34;, function () { var jsonData = pm.response.json(); pm.expect(jsonData.code).to.eql(&#34;ASMS-001&#34;); });   Decode JWT pm.test(&#34;Verify it has response body&#34;, function () { var jsonData = pm.response.json(); // pm.expect(jsonData.code).to.eql(&#34;ASMS-001&#34;); }); function jwt_decode(jwt) { var parts = jwt.split(&#39;.&#39;); // header, payload, signature return JSON.parse(atob(parts[1])); } var data = JSON.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/request-manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/request-manipulation/</guid>
      <description>Loop var randomCounter = postman.getGlobalVariable(&#39;lockOutCount&#39;); console.log(randomCounter) //assertions tests[&#34;API expected to fail with&#34;] = responseCode.code === 401; var data = JSON.parse(responseBody); if(randomCounter &amp;lt; 5) { tests[&#34;Fail with invalid creds&#34;] = data.code === &#34;Authentication.InvalidCredentials&#34;; } else { tests[&#34;Fail with unauthenticated&#34;] = data.code === &#34;Authentication.Unauthenticated&#34;; tests[&#34;Check if preferred recovery is Call HelpDesk&#34;] = data.details.recovery[0].id === &#34;CallHelpDesk&#34;; tests[&#34;Check if preferred recovery type is AuthN&#34;] = data.details.recovery[0].type === &#34;AuthN&#34;; } //loop for x times the same test randomCounter = parseInt(randomCounter) + 1 postman.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/skip-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/skip-request/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/symmetric-jwt-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/symmetric-jwt-generator/</guid>
      <description>JWT Generator function base64url(source) { // Encode in classical base64 encodedSource = CryptoJS.enc.Base64.stringify(source); // Remove padding equal characters encodedSource = encodedSource.replace(/=+$/, &#39;&#39;); // Replace characters according to base64url specifications encodedSource = encodedSource.replace(/\+/g, &#39;-&#39;); encodedSource = encodedSource.replace(/\//g, &#39;_&#39;); return encodedSource; } // Generate JWT var header = { &#34;alg&#34;: &#34;HS256&#34;, &#34;typ&#34;: &#34;JWT&#34; }; var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header)); var encodedHeader = base64url(stringifiedHeader); //TODO: Feed in a dummy payload for the JWT var data = { &#34;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/postman/totp-verifier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/totp-verifier/</guid>
      <description>TOTP verifier TOTP Sessi  updateOtp() function dec2hex(s) { return (s &amp;lt; 15.5 ? &#39;0&#39; : &#39;&#39;) + Math.round(s).toString(16); } function hex2dec(s) { return parseInt(s, 16); } function base32tohex(base32) { var base32chars = &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&#34;; var bits = &#34;&#34;; var hex = &#34;&#34;; for (var i = 0; i &amp;lt; base32.length; i++) { var val = base32chars.indexOf(base32.charAt(i).toUpperCase()); bits += leftpad(val.toString(2), 5, &#39;0&#39;); } for (var j = 0; j+4 &amp;lt;= bits.length;j+=4) { var chunk = bits.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/posts/java/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/posts/java/java/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Summary of document&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/posts/linux/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/posts/linux/linux/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Summary of document&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/posts/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/posts/main/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/posts/scp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/posts/scp/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Summary of document&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/posts/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/posts/test/</guid>
      <description>A Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.
Website | Forum | Chat | Documentation | Installation Guide | Twitter
   
Overview Hugo is a static site generator written in Go. It is optimized for speed, easy use and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website.
Hugo relies on Markdown files with front matter for meta data.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/site-building/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/site-building/dns/</guid>
      <description>Purchase domain for godaddy
  Host site in github
  Configure go daddy domain to git hub page
   f the domain has been forwarded or automatically connected this would need to be removed if you&#39;re going to edit the DNS manually. Here is an article on the connection wizard, if anything is on in there make sure to turn it off. https://www.godaddy.com/help/forward-a-domain-12123 A record- Host: @ Points to: [IP address from below] You can create multiple A records, one for each address.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/site-building/references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/site-building/references/</guid>
      <description>References https://axdlog.com/2018/using-hugo-and-travis-ci-to-deploy-blog-to-github-pages-automatically/
 https://github.com/matcornic/hugo-theme-learn
 https://discourse.gohugo.io/t/public-folder-and-its-content-not-generated/10535
   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://pi14tech.com/technology/linux/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/technology/linux/linux/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Summary of document&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>1. Cheatsheet</title>
      <link>https://pi14tech.com/git/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/cheatsheet/</guid>
      <description>Table 1. Configuration     Command
 Usage
   git config --list
 See all the global variables that has been set
   git config --global user.name &#34;John D&#34;
 Used to track who has made changes to files in local system
   git config --global user.email johndoe@e.com
 Used to track who has made changes to files in local system
   git config --global core.</description>
    </item>
    
    <item>
      <title>Branch - rename</title>
      <link>https://pi14tech.com/git/rename-branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/rename-branch/</guid>
      <description>GIT Rename branch It&amp;#8217;s quite common we start using a temporary name for a feature branch we are working on, and we have to rename the branch to something more meaningful as our work progresses.
 In case, the git branch is still in local and has not been pushed to remote, below command can be used to rename the branch locally
   Rename branch locally
   git branch -m old_branch new_branch</description>
    </item>
    
    <item>
      <title>Certificate Key Matcher</title>
      <link>https://pi14tech.com/certificate-mgmt/certificate-key-matcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/certificate-mgmt/certificate-key-matcher/</guid>
      <description>When you are dealing with lots of different certificates it can be easy to lose track of which certificate goes with which private key or which CSR was used to generate which certificate.
 The Certificate Key Matcher simply compares an md5 hash of the private key modulus, the certificate modulus, or the CSR modulus and tells you whether they match or not. You can check whether a certificate matches private key, or a CSR matches a certificate on your own computer by using the OpenSSL commands below:</description>
    </item>
    
    <item>
      <title>Cherry pick</title>
      <link>https://pi14tech.com/git/git-cherry-pick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/git-cherry-pick/</guid>
      <description>GIT cherry pick Cherry picking in git means to choose a commit from one branch and apply it onto another. This is in contrast with other ways such as merge and rebase which normally applies many commits onto a another branch.
 How to cherry pick?
   Make sure you are on the branch you want apply the commit to.
`git checkout master`     Cherry pick a specific commit feature you need from list of commits</description>
    </item>
    
    <item>
      <title>ci/cd</title>
      <link>https://pi14tech.com/postman/ci-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/postman/ci-cd/</guid>
      <description>How to use postman in CI/CD pipeline Postman is a pretty powerful rest testing tool with easy to use GUI as well as command line options. Postman scripts can be integrated into your CI/CD pipeline to ensure all the functionalities are in place as you pr;ogress through your development cycle.
 Sample workflow:
 START CI/CD &amp;#8658; DEPLOY &amp;#8658; RUN POSTMAN TESTS &amp;#8658; PUBLISH RESULT &amp;#8658; PASS/FAIL CI/CD
 Within Postman there are various features that are suited for a CI/CD pipeline</description>
    </item>
    
    <item>
      <title>Create self signed certificate</title>
      <link>https://pi14tech.com/certificate-mgmt/create-self-signed-cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/certificate-mgmt/create-self-signed-cert/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://pi14tech.com/technology/java/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/technology/java/java/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Summary of document&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>GIT - Create feature branch</title>
      <link>https://pi14tech.com/git/branch-create-feature-branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/branch-create-feature-branch/</guid>
      <description>I am currently on dev and want to switch to a particular branch
 git status
 git checkout -b feature/my-new-feature-branch-name
 </description>
    </item>
    
    <item>
      <title>GIT - Delete file</title>
      <link>https://pi14tech.com/git/delete-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/delete-file/</guid>
      <description>Its pretty common that you want to remove a file that has already been commited to a remote repository. There are couple of options
 rm &amp;lt;file-name&amp;gt; git add &amp;lt;file-name&amp;gt;
 OR do `git rm &amp;lt;file-name&amp;gt;
 Essentially git rm is combination of first 2 commands.
 git rm --cached will remove the file from the index (staging it for deletion on the next commit), but keep your copy in the local file system</description>
    </item>
    
    <item>
      <title>GIT - Ignore</title>
      <link>https://pi14tech.com/git/git-ignore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/git-ignore/</guid>
      <description>Its pretty common that you have some temp files or output or generated or target folders/files that you do not want to commit to remote version control system. Such files can be added onto a .gitignore file in the root of the source project. Sample entries for a gitignore file is
 [source.rb] .project .classpath /.settings/ .settings* /target/ *.iml *.versionsBackup /.idea/   </description>
    </item>
    
    <item>
      <title>Merge</title>
      <link>https://pi14tech.com/git/git-merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/git-merge/</guid>
      <description>GIT Merge Merge bugfix/feature onto master/dev Say your bug fix branch is called bugfix and you want to merge it into master:
 git checkout master
 git merge --squash bugfix
 git commit
 This will take all the commits from the bugfix branch, squash them into 1 commit and then merge it with your master branch.
 In case you think there are possible merge conflicts that can occur between master and bugfix but you know that bugfix branch has the correct changes</description>
    </item>
    
    <item>
      <title>Replace certificate in keystore</title>
      <link>https://pi14tech.com/certificate-mgmt/replace-keystore-certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/certificate-mgmt/replace-keystore-certificate/</guid>
      <description>keytool -list -v -keystore /opt/idam/jdk-8u40/jre/lib/security/cacerts keytool -delete -alias test-cert -keystore /opt/idam/jdk-8u40/jre/lib/security/cacerts keytool -import -trustcacerts -file /home/ubuntu/test.cert -alias test-cert -keystore /opt/idam/jdk-8u40/jre/lib/security/cacerts   </description>
    </item>
    
    <item>
      <title>Revert - Merged Commit</title>
      <link>https://pi14tech.com/git/git-revert-merged-commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/git-revert-merged-commit/</guid>
      <description>GIT revert merged commit Git revert a merged commit
 The -m option specifies the parent number. This is because a merge commit has more than one parent, and Git does not know automatically which parent was the mainline, and which parent was the branch you want to un-merge.
 When you view a merge commit in the output of git log, you will see its parents listed on the line that begins with Merge:</description>
    </item>
    
    <item>
      <title>scp</title>
      <link>https://pi14tech.com/linux/scp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/linux/scp/</guid>
      <description>Secure copy protocol(SCP) allows files to be copied between machines/servers in a secure way.
 Usage
 scp &amp;lt;source-specification&amp;gt; &amp;lt;destination-specification&amp;gt;
     Tip   Format for a resource in remote(source or destination) is: user@machine:filename
  Format for file specification on local system is : filename
  While accessing a remote server
  make sure user account exists in remote destination
  make sure filesystem has sufficient permission to be accessed by user account</description>
    </item>
    
    <item>
      <title>scp</title>
      <link>https://pi14tech.com/technology/linux/scp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/technology/linux/scp/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Summary of document&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Tag - create</title>
      <link>https://pi14tech.com/git/create-tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/create-tag/</guid>
      <description>GIT Create Tag To create a tag on your current branch, run this:
 git tag &amp;lt;tagname&amp;gt;
 This will create a local tag with the current state of the branch you are on. When pushing to your remote repo, tags are NOT included by default. You will need to explicitly say that you want to push your tags to your remote repo:
 git push origin —tags
   Note  This command will push all the tags in your local machine.</description>
    </item>
    
    <item>
      <title>Tag - delete</title>
      <link>https://pi14tech.com/git/delete-tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi14tech.com/git/delete-tag/</guid>
      <description>GIT Delete Local/Remote Tag Its quite common during a release process or a tag process, you will need to retag a specific version or remove a tag that was already pushed to remote branch.
 To remove a tag if it has been pushed to remote repository
 git push --delete origin tagname
 If you also need to delete the local tag, use:
 git tag --delete tagname
 Dissecting what happened above Pushing a branch, tag, or other ref to a remote repository involves specifying &#34;</description>
    </item>
    
  </channel>
</rss>